{"version":3,"file":"static/js/718.9b95ee04.chunk.js","mappings":"yMAaA,MAAMA,EAAW,CACf,KACA,QACA,eACA,UACA,2CACA,2BACA,sCACA,0CACA,OACA,6BACA,uBACA,+BACA,WAqBIC,EAAYC,IAAsB,IAArB,YAAEC,GAAaD,EAChC,MAGOE,EAAKC,IAAcC,EAAAA,EAAAA,UAAS,IAC5BC,EAASC,IAAiBF,EAAAA,EAAAA,UAASN,EAASI,KAC5CK,EAAMC,IAAcJ,EAAAA,EAAAA,UAAS,IAC7BK,EAAUC,IAAeN,EAAAA,EAAAA,WAAS,GAuBzC,MAhDkBO,EAACC,EAAUC,KAC7B,MAAMC,GAAgBC,EAAAA,EAAAA,WAEtBC,EAAAA,EAAAA,WAAU,KACRF,EAAcG,QAAUL,GACvB,CAACA,KAEJI,EAAAA,EAAAA,WAAU,KACR,GAAIH,EAAO,CACT,MAAMK,EAAKC,YAAY,KACrBL,EAAcG,WACbJ,GACH,MAAO,IAAMO,cAAcF,EAC7B,CACA,MAAO,QACN,CAACL,KAYJF,CAAY,KACV,IAAIU,EAASnB,EACToB,EAAUf,EACVA,EAXO,IAWQT,EAASI,GAAKqB,SAC/BF,GAAU,EACVC,EAAU,GAERD,IAAWvB,EAASyB,OAClBtB,GACFE,EAAW,GACXK,EAAW,IAEXE,GAAY,IAGdJ,EAAcR,EAASuB,GAAQG,MAAM,EAAGF,IACxCnB,EAAWkB,GACXb,EAAWc,EAAU,KAEtBb,EA1BW,GA0BQ,OAGpBgB,EAAAA,EAAAA,KAAA,OACEC,UAAU,mBAEVC,aAAcA,IAAMjB,GAAY,GAChCkB,aAAcA,IAAO1B,EAAMJ,EAASyB,QAAWb,GAAY,GAAMmB,UAEjEJ,EAAAA,EAAAA,KAAA,QAAAI,SAAOxB,OASbN,EAAU+B,aAAe,CACvB7B,aAAa,GAOf,UCrFM8B,EAAe/B,IAAA,OAAM6B,GAAU7B,EAAA,OAAKyB,EAAAA,EAAAA,KAACO,EAAAA,GAAI,IAAKH,KA0BpD,EAxBcI,KACZR,EAAAA,EAAAA,KAACS,EAAAA,EAAI,CACHC,MAAM,QACNC,YAAY,0BAAyBP,UAErCQ,EAAAA,EAAAA,MAAA,WAASX,UAAU,gBAAgBR,GAAG,QAAOW,SAAA,EAC3CJ,EAAAA,EAAAA,KAAA,UAAAI,UACEQ,EAAAA,EAAAA,MAAA,OAAKX,UAAU,QAAOG,SAAA,EACpBJ,EAAAA,EAAAA,KAAA,MAAI,cAAY,UAASI,UAACJ,EAAAA,EAAAA,KAACO,EAAAA,GAAI,CAACM,GAAG,SAAQT,SAAC,gBAE5CJ,EAAAA,EAAAA,KAAC1B,EAAS,UAGd0B,EAAAA,EAAAA,KAACc,IAAa,CACZC,OAvBM,GAwBNC,UAAW,CACTT,KAAMD,GAERW,YAAY,Q","sources":["components/Contact/EmailLink.js","pages/About.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\n// actually this is a page for the hello message now.\n\n// Validates the first half of an email address.\n// const validateText = (text) => {\n//   // NOTE: Passes RFC 5322 but not tested on google's standard.\n//   // eslint-disable-next-line no-useless-escape\n//   const re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\n//   return re.test(text) || text.length === 0;\n// };\n\nconst messages = [\n  'hi',\n  'hello',\n  '你好',\n  'Bonjour',\n  'unfortunately this is not a llm chat bot',\n  'as this is a static page',\n  'but glad you want to learn about me',\n  'however, I am still writing an about me',\n  'ihlu',\n  'face just hit the keyboard',\n  'maybe not today :(  ',\n  'i will try to finish it asap',\n  'so long',\n];\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay) {\n      const id = setInterval(() => {\n        savedCallback.current();\n      }, delay);\n      return () => clearInterval(id);\n    }\n    return () => {}; // pass linter\n  }, [delay]);\n};\n\nconst EmailLink = ({ loopMessage }) => {\n  const hold = 30; // ticks to wait after message is complete before rendering next message\n  const delay = 40; // tick length in mS\n\n  const [idx, updateIter] = useState(0); // points to current message\n  const [message, updateMessage] = useState(messages[idx]);\n  const [char, updateChar] = useState(0); // points to current char\n  const [isActive, setIsActive] = useState(true); // disable when all messages are printed\n\n  useInterval(() => {\n    let newIdx = idx;\n    let newChar = char;\n    if (char - hold >= messages[idx].length) {\n      newIdx += 1;\n      newChar = 0;\n    }\n    if (newIdx === messages.length) {\n      if (loopMessage) {\n        updateIter(0);\n        updateChar(0);\n      } else {\n        setIsActive(false);\n      }\n    } else {\n      updateMessage(messages[newIdx].slice(0, newChar));\n      updateIter(newIdx);\n      updateChar(newChar + 1);\n    }\n  }, isActive ? delay : null);\n\n  return (\n    <div\n      className=\"inline-container\"\n      // style={validateText(message) ? {} : { color: 'red' }}\n      onMouseEnter={() => setIsActive(false)}\n      onMouseLeave={() => (idx < messages.length) && setIsActive(true)}\n    >\n      <span>{message}</span>\n      {/* <a href={validateText(message) ? `mailto:${message}@mldangelo.com` : ''}> */}\n      {/*    */}\n      {/*   <span>@mldangelo.com</span> */}\n      {/* </a> */}\n    </div>\n  );\n};\n\nEmailLink.defaultProps = {\n  loopMessage: true,\n};\n\nEmailLink.propTypes = {\n  loopMessage: PropTypes.bool,\n};\n\nexport default EmailLink;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport ReactMarkdown from 'react-markdown';\nimport raw from 'raw.macro';\n\nimport Main from '../layouts/Main';\nimport EmailLink from '../components/Contact/EmailLink';\n\n// uses babel to load contents of file\nconst markdown = raw('../data/about.md');\n\n// const count = markdown.split(/\\s+/)\n//   .map((s) => s.replace(/\\W/g, ''))\n//   .filter((s) => s.length).length;\n\n// Make all hrefs react router links\nconst LinkRenderer = ({ ...children }) => <Link {...children} />;\n\nconst About = () => (\n  <Main\n    title=\"About\"\n    description=\"Learn about Peiyuan Qi.\"\n  >\n    <article className=\"post markdown\" id=\"about\">\n      <header>\n        <div className=\"title\">\n          <h2 data-testid=\"heading\"><Link to=\"/about\">About Me</Link></h2>\n          {/* <p>(in about {count} words)</p> */}\n          <EmailLink />\n        </div>\n      </header>\n      <ReactMarkdown\n        source={markdown}\n        renderers={{\n          Link: LinkRenderer,\n        }}\n        escapeHtml={false}\n      />\n    </article>\n  </Main>\n);\n\nexport default About;\n"],"names":["messages","EmailLink","_ref","loopMessage","idx","updateIter","useState","message","updateMessage","char","updateChar","isActive","setIsActive","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","newIdx","newChar","length","slice","_jsx","className","onMouseEnter","onMouseLeave","children","defaultProps","LinkRenderer","Link","About","Main","title","description","_jsxs","to","ReactMarkdown","source","renderers","escapeHtml"],"sourceRoot":""}